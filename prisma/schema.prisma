generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id                String              @id @unique @default(uuid())
  name              String
  email             String
  password          String
  Class             String?
  school            String?
  dob               String?
  gender            String?
  image             String?
  verified          Boolean             @default(false)
  about             String?
  role              Role                @default(STUDENT)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Token             Token[]
  emailVerification emailVerification[]
  RestPassword      RestPassword[]
  Post              Post[]
  TutorRequest      TutorRequest[]
  ConnectedAccounts ConnectedAccount[]  @relation("ConnectedAccountUser")
  ConnectedAccount  ConnectedAccount[]
}

model RestPassword {
  id        String   @id @unique @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model emailVerification {
  id        String   @id @unique @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id        String   @id @unique @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id           String         @id @unique @default(uuid())
  medium       String
  Class        String
  subject      String
  fees         String
  description  String
  booked       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  TutorRequest TutorRequest[]
}

model TutorRequest {
  id        String   @id @unique @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model ConnectedAccount {
  id            String   @id @unique @default(uuid())
  userId        String
  contactUserId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ContactUser   User     @relation("ConnectedAccountUser", fields: [contactUserId], references: [id], onDelete: Cascade)
  connected     Chat[]
}

model Chat {
  id          String           @id @unique @default(uuid())
  connectedId String
  message     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  connected   ConnectedAccount @relation(fields: [connectedId], references: [id], onDelete: Cascade)
}
